# -*- coding: utf-8 -*-
"""Copy of Flights_Model_Production.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1upRAsI-A1xJ644ozKzj-jE8wJx__f_Wn
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
from sklearn.ensemble import RandomForestRegressor
import joblib
# %matplotlib inline

def Encoding_Categorical_Variables(df):

  l = (df['AIRLINE'].unique()).tolist()
  l = {value: i for i, value in enumerate(l)}
  df['AIRLINE'] = df['AIRLINE'].map(l)
  return df

def convert_to_timestamp(time_value):
    """
    Convert time in the form 1 to 2400 into a clock timestamp.
    """
    # Ensure the time value is zero-padded to 4 digits
    time_str = f"{time_value:04d}"

    # Extract hours and minutes
    hours = int(time_str[:2])
    minutes = int(time_str[2:])

    # Handle invalid time values
    if hours > 23 or minutes > 59:
        return None  # Return None for invalid times like 2400

    # Format as a timestamp
    #return datetime.strptime(f"{hours:02d}:{minutes:02d}", "%H:%M").time()
    return f"{hours:02d}:{minutes:02d}"

def time_to_mins1(time):
  hours = time // 100
  mins = time % 100
  return hours*60 + mins

def feature_engineering(df):

  # Feature 2 SEASON
  df['SEASON'] = df['MONTH'].map({1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 3, 7: 3, 8: 3, 9: 4, 10: 4, 11: 4, 12: 1})
  # Feature 4 Distance Categories
  df.loc[df['DISTANCE'] <= 373, 'DISTANCE'] = 1 #short
  df.loc[(df['DISTANCE'] > 373) & (df['DISTANCE'] < 1062), 'DISTANCE'] = 2 #medium
  df.loc[df['DISTANCE'] >= 1062, 'DISTANCE'] = 3 #long
  return df

def Transforming_hist_data(df):
  fts = ['WHEELS_ON','WHEELS_OFF','DEPARTURE_TIME']
  hist_fts = ["AIRLINE"]
  for f in fts:
    df[f] = df[f].apply(time_to_mins1)
    flights_hist = df.groupby('AIRLINE')[f].agg('median').reset_index()
    flights_hist.rename(columns={'median': f'{f}_MED'}, inplace=True)

    #df = df.merge(flights_hist,on='AIRLINE', how='left')
    hist_fts.append(f'{f}_y')
  return flights_hist

def Transforming_hist_data(df):
    # List of features to transform
    fts = ['WHEELS_ON', 'WHEELS_OFF', 'DEPARTURE_TIME']

    # Convert time features to minutes
    for f in fts:
        df[f] = df[f].apply(time_to_mins1)

    # Compute the median of each feature grouped by 'AIRLINE'
    flights_hist = df.groupby('AIRLINE')[fts].median().reset_index()

    # Rename the columns to indicate they are medians
    flights_hist.rename(columns={f: f"{f}_y" for f in fts}, inplace=True)

    return flights_hist

def time_to_mins2(time_str):
  hours,mins = map(int, time_str.split(':'))
  return hours*60 + mins

def encode_cyclic_time_features(mins, period=1440):
  sin_col = np.sin(2*np.pi*mins/period)
  cos_col = np.cos(2*np.pi*mins/period)
  return sin_col,cos_col

def Encoding_time_features(df):
  df['SCHEDULED_ARRIVAL'] = df['SCHEDULED_ARRIVAL'].astype(int).apply(convert_to_timestamp)
  df.dropna(inplace=True)
  df["SCHEDULED_ARRIVAL_mins"] = df['SCHEDULED_ARRIVAL'].apply(time_to_mins2)
  df["SCHEDULED_ARRIVAL_mins_sin"],df["SCHEDULED_ARRIVAL_mins_cos"] = zip(*df["SCHEDULED_ARRIVAL_mins"].apply(encode_cyclic_time_features))
  return df

def merge_newdata(df,hist_df):
  features = ["AIRLINE","WHEELS_ON_y","WHEELS_OFF_y","DEPARTURE_TIME_y"]
  df = df.merge(hist_df, on='AIRLINE', how='left')
  df[features].fillna(df[features].median(), inplace=True)
  return df

def convert_to_hhmm(minutes):
    hours = (minutes - 1) // 60  # Convert to zero-based hours
    mins = (minutes - 1) % 60   # Compute the minutes
    return f"{hours:02}:{mins:02}"

def Model_Pipeline(df,hist_df,sc,model):
  features = ["AIRLINE","SCHEDULED_ARRIVAL_mins_sin","SCHEDULED_ARRIVAL_mins_cos","SEASON","WHEELS_ON_y","WHEELS_OFF_y","DEPARTURE_TIME_y","DISTANCE"]
  hist_df = Transforming_hist_data(hist_df)
  df = Encoding_Categorical_Variables(df)
  hist_df = Encoding_Categorical_Variables(hist_df)
  df = merge_newdata(df,hist_df)
  df = feature_engineering(df)
  df = Encoding_time_features(df)
  df[features] = sc.transform(df[features])
  predictions = model.predict(df[features])
  predictions = pd.DataFrame({
        'FLIGHT NUMBER': df['FLIGHT_NUMBER'],
        'ORIGIN AIRPORT': df['ORIGIN_AIRPORT'],
        'DESTINATION AIRPORT': df['DESTINATION_AIRPORT'],
        'PREDICTED ARRIVAL TIME': predictions.astype(int)
    })
  predictions['PREDICTED ARRIVAL TIME'] = predictions['PREDICTED ARRIVAL TIME'].apply(convert_to_hhmm)
  return predictions